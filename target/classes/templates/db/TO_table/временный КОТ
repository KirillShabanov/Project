import com.home.MyWorkTime.service.SelectForTOService;
import lombok.AllArgsConstructor;
import lombok.extern.java.Log;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/to_regulations")
@AllArgsConstructor
@Log
@CrossOrigin
public class SelectForTOController {

    private final SelectForTOService selectForTOService;

    @GetMapping("/forTO/{IdTO}")
    public Long TOIdForSelect(@PathVariable Long IdTO){
        log.info("Handling find ID TO: " + IdTO);
        return null;
    }

    @GetMapping("/forAuto/{IdAuto}")
    public Long AutoIdForSelect(@PathVariable Long IdAuto){
        log.info("Handling find ID Auto: " + IdAuto);
        return null;
    }

}
_______________________________________________________________________________________________________________________


let btn_SearchShowTO = document.getElementById('btn_SearchShowTO')


async function btnSearchShowTO(){

    let selectTO = document.getElementById('selectTO');
    selectTO = selectTO.value;
    console.log("ID TO: " + selectTO);

    fetch(`http://localhost:8080/to_regulations/forTO/${selectTO}`, {
        method: 'GET',
        redirect: 'follow'
    }) .catch(error => console.log('error', error));

    let selectAuto = document.getElementById('selectAuto');
    selectAuto = selectAuto.value;
    console.log("ID Auto: " + selectAuto);

    fetch(`http://localhost:8080/to_regulations/forAuto/${selectAuto}`, {
        method: 'GET',
        redirect: 'follow'
    }) .catch(error => console.log('error', error));

};
____________________________________________________________________________________________

try {
            // Создают Excel файл
            String filenamePost = "C:/Users/User/Desktop/ПостСервисныйОбзвон.xls";
            HSSFWorkbook workbook = new HSSFWorkbook();
            HSSFSheet sheet = workbook.createSheet("ПостСервисныйОбзвон");

            //Шапка
            HSSFRow rowhead = sheet.createRow((short)0);
            rowhead.createCell(0).setCellValue("No.");
            rowhead.createCell(1).setCellValue("Номер заказ-наряда");
            rowhead.createCell(2).setCellValue("VIN");
            rowhead.createCell(3).setCellValue("Номер телефона");
            rowhead.createCell(4).setCellValue("Имя Клиента");
            rowhead.createCell(5).setCellValue("Замечания");
            rowhead.createCell(6).setCellValue("Примечания");

            for (int i=0; i< firstCall.size(); i++) {
                //Строки
                HSSFRow row = sheet.createRow((short) i+1);
                row.createCell(0).setCellValue(i + 1);
                row.createCell(1).setCellValue(firstCall.get(i).getNum_order());
                row.createCell(2).setCellValue(firstCall.get(i).getVin());
                row.createCell(3).setCellValue(firstCall.get(i).getPhone());
                row.createCell(4).setCellValue(firstCall.get(i).getClient_name());
            }
            //Запись файла
            FileOutputStream fileOutPost = new FileOutputStream(filenamePost);
            workbook.write(fileOutPost);
            fileOutPost.close();
            System.out.println("ПостСервисныйОбзвон создан!");
        }   catch ( Exception ex ) {
            System.out.println(ex);
        }

        try {
            // Создают Excel файл
            String filenameNps = "C:/Users/User/Desktop/NPS-KIA Обзвон.xls";
            HSSFWorkbook workbook = new HSSFWorkbook();
            HSSFSheet sheet = workbook.createSheet("NPS-KIA");

            //Шапка
            HSSFRow rowhead = sheet.createRow((short)0);
            rowhead.createCell(0).setCellValue("No.");
            rowhead.createCell(1).setCellValue("Номер заказ-наряда");
            rowhead.createCell(2).setCellValue("VIN");
            rowhead.createCell(3).setCellValue("Номер телефона");
            rowhead.createCell(4).setCellValue("Имя Клиента");
            rowhead.createCell(5).setCellValue("Замечания");
            rowhead.createCell(6).setCellValue("Примечания");

            for (int i=0; i< npsCall.size(); i++) {
                //Строки
                HSSFRow row = sheet.createRow((short) i+1);
                row.createCell(0).setCellValue(i + 1);
                row.createCell(1).setCellValue(npsCall.get(i).getNum_order());
                row.createCell(2).setCellValue(npsCall.get(i).getVin());
                row.createCell(3).setCellValue(npsCall.get(i).getPhone());
                row.createCell(4).setCellValue(npsCall.get(i).getClient_name());
            }
            //Запись файла
            FileOutputStream fileOutNps = new FileOutputStream(filenameNps);
            workbook.write(fileOutNps);
            fileOutNps.close();
            System.out.println("NPS-KIA создан!");
        }   catch ( Exception ex ) {
            System.out.println(ex);
        }
    }

    public void sendHtmlMessageKiaFirstCall(String filenamePost) throws MessagingException {
            SendEmailModel sendEmailModel = new SendEmailModel();
            sendEmailModel.setFrom("info@vitautocity.by");
            sendEmailModel.setTo("k.shabanov@vitautocity.by");
            sendEmailModel.setProperties(sendEmailModel.getProperties());
            sendEmailModel.sendHtmlMessage(sendEmailModel);
            Map<String, Object> properties = new HashMap<>();
            sendEmailModel.setProperties(properties);
            Session session = Session.getDefaultInstance(sendEmailModel.setProperties());
            try {
                MimeMessage message = new MimeMessage(session);
                message.setFrom(sendEmailModel.getFrom());
                message.setFrom(sendEmailModel.getFrom());
                message.setSubject("Пост сервисный обзвон клиентов KIA");
                BodyPart messageBodyPart = new MimeBodyPart();
                messageBodyPart.setText("Добрый день!" + "\n"
                        + "Прошу Вас провести обратную связь с клиентами и заполнить вложенный файл." + "\n"
                        + "После заполнения - отправить файл на электронную почту: k.shabanov@vitautocity.by");
                Multipart multipart = new MimeMultipart();
                multipart.addBodyPart(messageBodyPart);
                messageBodyPart = new MimeBodyPart();
                filenamePost = "ПостСервисныйОбзвон.xls";
                DataSource source = new FileDataSource(filenamePost);
                messageBodyPart.setDataHandler(new DataHandler(source));
                messageBodyPart.setFileName(filenamePost);
                multipart.addBodyPart(messageBodyPart);
                message.setContent(multipart);
                Transport.send(message);
                System.out.println("Сообщение успешно отправлено....");
            } catch (MessagingException mex) {
                mex.printStackTrace();
            }
        }

